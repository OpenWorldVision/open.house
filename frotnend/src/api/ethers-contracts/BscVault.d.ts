/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BscVaultInterface extends ethers.utils.Interface {
  functions: {
    "BASIS_POINTS_DIVISOR()": FunctionFragment;
    "FUNDING_RATE_PRECISION()": FunctionFragment;
    "MAX_FEE_BASIS_POINTS()": FunctionFragment;
    "MAX_FUNDING_RATE_FACTOR()": FunctionFragment;
    "MAX_LIQUIDATION_FEE_USD()": FunctionFragment;
    "MIN_FUNDING_RATE_INTERVAL()": FunctionFragment;
    "MIN_LEVERAGE()": FunctionFragment;
    "PRICE_PRECISION()": FunctionFragment;
    "USDG_DECIMALS()": FunctionFragment;
    "addRouter(address)": FunctionFragment;
    "adjustForDecimals(uint256,address,address)": FunctionFragment;
    "approvedRouters(address,address)": FunctionFragment;
    "availableReserve(address)": FunctionFragment;
    "buyUSDG(address,address)": FunctionFragment;
    "clearTokenConfig(address)": FunctionFragment;
    "cumulativeFundingRates(address)": FunctionFragment;
    "decreasePosition(address,address,address,uint256,uint256,bool,address)": FunctionFragment;
    "directPoolDeposit(address)": FunctionFragment;
    "feeReserves(address)": FunctionFragment;
    "fundingInterval()": FunctionFragment;
    "fundingRateFactor()": FunctionFragment;
    "getDelta(address,uint256,uint256,bool)": FunctionFragment;
    "getFundingFee(address,uint256,uint256)": FunctionFragment;
    "getMaxPrice(address)": FunctionFragment;
    "getMaxUsdgAmount()": FunctionFragment;
    "getMinPrice(address)": FunctionFragment;
    "getNextAveragePrice(address,uint256,uint256,bool,uint256,uint256)": FunctionFragment;
    "getNextFundingRate(address)": FunctionFragment;
    "getPosition(address,address,address,bool)": FunctionFragment;
    "getPositionDelta(address,address,address,bool)": FunctionFragment;
    "getPositionFee(uint256)": FunctionFragment;
    "getPositionKey(address,address,address,bool)": FunctionFragment;
    "getPositionLeverage(address,address,address,bool)": FunctionFragment;
    "getRedemptionAmount(address,uint256)": FunctionFragment;
    "getRedemptionBasisPoints(address)": FunctionFragment;
    "getRedemptionCollateral(address)": FunctionFragment;
    "getRedemptionCollateralUsd(address)": FunctionFragment;
    "getUtilisation(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "guaranteedUsd(address)": FunctionFragment;
    "includeAmmPrice()": FunctionFragment;
    "increasePosition(address,address,address,uint256,bool)": FunctionFragment;
    "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isMintingEnabled()": FunctionFragment;
    "isSwapEnabled()": FunctionFragment;
    "lastFundingTimes(address)": FunctionFragment;
    "liquidatePosition(address,address,address,bool,address)": FunctionFragment;
    "liquidationFeeUsd()": FunctionFragment;
    "marginFeeBasisPoints()": FunctionFragment;
    "maxDebtBasisPoints()": FunctionFragment;
    "maxGasPrice()": FunctionFragment;
    "maxLeverage()": FunctionFragment;
    "maxUsdgBatchSize()": FunctionFragment;
    "maxUsdgBuffer()": FunctionFragment;
    "minProfitBasisPoints(address)": FunctionFragment;
    "poolAmounts(address)": FunctionFragment;
    "positions(bytes32)": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "redemptionBasisPoints(address)": FunctionFragment;
    "removeRouter(address)": FunctionFragment;
    "reservedAmounts(address)": FunctionFragment;
    "router()": FunctionFragment;
    "sellUSDG(address,address)": FunctionFragment;
    "setFees(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setFundingRate(uint256,uint256)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setIsMintingEnabled(bool)": FunctionFragment;
    "setIsSwapEnabled(bool)": FunctionFragment;
    "setMaxDebtBasisPoints(uint256)": FunctionFragment;
    "setMaxGasPrice(uint256)": FunctionFragment;
    "setMaxLeverage(uint256)": FunctionFragment;
    "setMaxUsdg(uint256,uint256)": FunctionFragment;
    "setPriceFeed(address)": FunctionFragment;
    "setTokenConfig(address,uint256,uint256,uint256,bool,bool)": FunctionFragment;
    "shortableTokens(address)": FunctionFragment;
    "stableSwapFeeBasisPoints()": FunctionFragment;
    "stableTokens(address)": FunctionFragment;
    "swap(address,address,address)": FunctionFragment;
    "swapFeeBasisPoints()": FunctionFragment;
    "tokenBalances(address)": FunctionFragment;
    "tokenDecimals(address)": FunctionFragment;
    "tokenToUsdMax(address,uint256)": FunctionFragment;
    "tokenToUsdMin(address,uint256)": FunctionFragment;
    "updateCumulativeFundingRate(address)": FunctionFragment;
    "usdToToken(address,uint256,uint256)": FunctionFragment;
    "usdToTokenMax(address,uint256)": FunctionFragment;
    "usdToTokenMin(address,uint256)": FunctionFragment;
    "usdg()": FunctionFragment;
    "usdgAmounts(address)": FunctionFragment;
    "validateLiquidation(address,address,address,bool,bool)": FunctionFragment;
    "whitelistedTokenCount()": FunctionFragment;
    "whitelistedTokens(address)": FunctionFragment;
    "withdrawFees(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FUNDING_RATE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FEE_BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FUNDING_RATE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_LIQUIDATION_FEE_USD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_FUNDING_RATE_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_LEVERAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDG_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addRouter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "adjustForDecimals",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedRouters",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "availableReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyUSDG",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "clearTokenConfig",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeFundingRates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePosition",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "directPoolDeposit",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "feeReserves", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fundingInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingRateFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDelta",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingFee",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getMaxPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getMaxUsdgAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getMinPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getNextAveragePrice",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextFundingRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionDelta",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionKey",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionLeverage",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionBasisPoints",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionCollateralUsd",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUtilisation",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "guaranteedUsd",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "includeAmmPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePosition",
    values: [string, string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMintingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSwapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastFundingTimes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [string, string, string, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationFeeUsd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marginFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDebtBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxGasPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLeverage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxUsdgBatchSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxUsdgBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minProfitBasisPoints",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "poolAmounts", values: [string]): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redemptionBasisPoints",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reservedAmounts",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sellUSDG",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setIsMintingEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSwapEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDebtBasisPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGasPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLeverage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxUsdg",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenConfig",
    values: [string, BigNumberish, BigNumberish, BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "shortableTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableSwapFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDecimals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToUsdMax",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToUsdMin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCumulativeFundingRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "usdToToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "usdToTokenMax",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "usdToTokenMin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "usdg", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdgAmounts", values: [string]): string;
  encodeFunctionData(
    functionFragment: "validateLiquidation",
    values: [string, string, string, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FUNDING_RATE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FEE_BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FUNDING_RATE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_LIQUIDATION_FEE_USD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_FUNDING_RATE_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_LEVERAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDG_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adjustForDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedRouters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyUSDG", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeFundingRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "directPoolDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingRateFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDelta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFundingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxUsdgAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextAveragePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionCollateralUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUtilisation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "guaranteedUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeAmmPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMintingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastFundingTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationFeeUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marginFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDebtBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxUsdgBatchSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxUsdgBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minProfitBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redemptionBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservedAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellUSDG", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIsMintingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDebtBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMaxUsdg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shortableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableSwapFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToUsdMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToUsdMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCumulativeFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdToToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usdToTokenMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdToTokenMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usdgAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;

  events: {
    "BuyUSDG(address,address,uint256,uint256)": EventFragment;
    "ClosePosition(bytes32,uint256,uint256,uint256,uint256,uint256,int256)": EventFragment;
    "CollectMarginFees(address,uint256,uint256)": EventFragment;
    "CollectSwapFees(address,uint256)": EventFragment;
    "DecreaseGuaranteedUsd(address,uint256)": EventFragment;
    "DecreasePoolAmount(address,uint256)": EventFragment;
    "DecreasePosition(bytes32,address,address,address,uint256,uint256,bool,uint256)": EventFragment;
    "DecreaseReservedAmount(address,uint256)": EventFragment;
    "DecreaseUsdgAmount(address,uint256)": EventFragment;
    "DirectPoolDeposit(address,uint256)": EventFragment;
    "IncreaseGuaranteedUsd(address,uint256)": EventFragment;
    "IncreasePoolAmount(address,uint256)": EventFragment;
    "IncreasePosition(bytes32,address,address,address,uint256,uint256,bool,uint256)": EventFragment;
    "IncreaseReservedAmount(address,uint256)": EventFragment;
    "IncreaseUsdgAmount(address,uint256)": EventFragment;
    "LiquidatePosition(bytes32,address,address,address,bool,uint256,uint256,uint256,int256,uint256)": EventFragment;
    "SellUSDG(address,address,uint256,uint256)": EventFragment;
    "Swap(address,address,address,uint256,uint256)": EventFragment;
    "UpdateFundingRate(address,uint256)": EventFragment;
    "UpdatePnl(bytes32,bool,uint256)": EventFragment;
    "UpdatePosition(bytes32,uint256,uint256,uint256,uint256,uint256,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyUSDG"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClosePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectMarginFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectSwapFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreaseGuaranteedUsd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreasePoolAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreaseReservedAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreaseUsdgAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DirectPoolDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseGuaranteedUsd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreasePoolAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseReservedAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseUsdgAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidatePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellUSDG"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFundingRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePnl"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePosition"): EventFragment;
}

export class BscVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BscVaultInterface;

  functions: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_LIQUIDATION_FEE_USD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_FUNDING_RATE_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_LEVERAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDG_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adjustForDecimals(
      _amount: BigNumberish,
      _tokenDiv: string,
      _tokenMul: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approvedRouters(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    availableReserve(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyUSDG(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clearTokenConfig(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cumulativeFundingRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decreasePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    directPoolDeposit(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeReserves(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    fundingInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundingRateFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDelta(
      _indexToken: string,
      _size: BigNumberish,
      _averagePrice: BigNumberish,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getFundingFee(
      _token: string,
      _size: BigNumberish,
      _entryFundingRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxUsdgAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNextAveragePrice(
      _indexToken: string,
      _size: BigNumberish,
      _averagePrice: BigNumberish,
      _isLong: boolean,
      _nextPrice: BigNumberish,
      _sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNextFundingRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ]
    >;

    getPositionDelta(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getPositionFee(
      _sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPositionKey(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPositionLeverage(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRedemptionAmount(
      _token: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRedemptionBasisPoints(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRedemptionCollateral(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRedemptionCollateralUsd(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUtilisation(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    guaranteedUsd(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    includeAmmPrice(overrides?: CallOverrides): Promise<[boolean]>;

    increasePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _router: string,
      _usdg: string,
      _priceFeed: string,
      _maxUsdgBatchSize: BigNumberish,
      _maxUsdgBuffer: BigNumberish,
      _liquidationFeeUsd: BigNumberish,
      _fundingRateFactor: BigNumberish,
      _maxGasPrice: BigNumberish,
      _maxDebtBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isMintingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    isSwapEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    lastFundingTimes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidatePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidationFeeUsd(overrides?: CallOverrides): Promise<[BigNumber]>;

    marginFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDebtBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxGasPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLeverage(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxUsdgBatchSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxUsdgBuffer(overrides?: CallOverrides): Promise<[BigNumber]>;

    minProfitBasisPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolAmounts(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    positions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        size: BigNumber;
        collateral: BigNumber;
        averagePrice: BigNumber;
        entryFundingRate: BigNumber;
        reserveAmount: BigNumber;
        realisedPnl: BigNumber;
      }
    >;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    redemptionBasisPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reservedAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    sellUSDG(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFees(
      _swapFeeBasisPoints: BigNumberish,
      _stableSwapFeeBasisPoints: BigNumberish,
      _marginFeeBasisPoints: BigNumberish,
      _liquidationFeeUsd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundingRate(
      _fundingInterval: BigNumberish,
      _fundingRateFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsMintingEnabled(
      _isMintingEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsSwapEnabled(
      _isSwapEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxDebtBasisPoints(
      _maxDebtBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxGasPrice(
      _maxGasPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxLeverage(
      _maxLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxUsdg(
      _maxUsdgBatchSize: BigNumberish,
      _maxUsdgBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceFeed(
      _priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenConfig(
      _token: string,
      _tokenDecimals: BigNumberish,
      _redemptionBps: BigNumberish,
      _minProfitBps: BigNumberish,
      _isStable: boolean,
      _isShortable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shortableTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stableSwapFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    stableTokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    swap(
      _tokenIn: string,
      _tokenOut: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenDecimals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenToUsdMax(
      _token: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenToUsdMin(
      _token: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateCumulativeFundingRate(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdToToken(
      _token: string,
      _usdAmount: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    usdToTokenMax(
      _token: string,
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    usdToTokenMin(
      _token: string,
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    usdg(overrides?: CallOverrides): Promise<[string]>;

    usdgAmounts(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    validateLiquidation(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    whitelistedTokenCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelistedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawFees(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_LIQUIDATION_FEE_USD(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_FUNDING_RATE_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_LEVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  USDG_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  addRouter(
    _router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adjustForDecimals(
    _amount: BigNumberish,
    _tokenDiv: string,
    _tokenMul: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approvedRouters(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  availableReserve(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyUSDG(
    _token: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clearTokenConfig(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cumulativeFundingRates(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decreasePosition(
    _account: string,
    _collateralToken: string,
    _indexToken: string,
    _collateralDelta: BigNumberish,
    _sizeDelta: BigNumberish,
    _isLong: boolean,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  directPoolDeposit(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeReserves(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  fundingInterval(overrides?: CallOverrides): Promise<BigNumber>;

  fundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

  getDelta(
    _indexToken: string,
    _size: BigNumberish,
    _averagePrice: BigNumberish,
    _isLong: boolean,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  getFundingFee(
    _token: string,
    _size: BigNumberish,
    _entryFundingRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getMaxUsdgAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getMinPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getNextAveragePrice(
    _indexToken: string,
    _size: BigNumberish,
    _averagePrice: BigNumberish,
    _isLong: boolean,
    _nextPrice: BigNumberish,
    _sizeDelta: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNextFundingRate(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPosition(
    _account: string,
    _collateralToken: string,
    _indexToken: string,
    _isLong: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean]
  >;

  getPositionDelta(
    _account: string,
    _collateralToken: string,
    _indexToken: string,
    _isLong: boolean,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  getPositionFee(
    _sizeDelta: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPositionKey(
    _account: string,
    _collateralToken: string,
    _indexToken: string,
    _isLong: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  getPositionLeverage(
    _account: string,
    _collateralToken: string,
    _indexToken: string,
    _isLong: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRedemptionAmount(
    _token: string,
    _usdgAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRedemptionBasisPoints(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRedemptionCollateral(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRedemptionCollateralUsd(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUtilisation(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  guaranteedUsd(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  includeAmmPrice(overrides?: CallOverrides): Promise<boolean>;

  increasePosition(
    _account: string,
    _collateralToken: string,
    _indexToken: string,
    _sizeDelta: BigNumberish,
    _isLong: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _router: string,
    _usdg: string,
    _priceFeed: string,
    _maxUsdgBatchSize: BigNumberish,
    _maxUsdgBuffer: BigNumberish,
    _liquidationFeeUsd: BigNumberish,
    _fundingRateFactor: BigNumberish,
    _maxGasPrice: BigNumberish,
    _maxDebtBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isMintingEnabled(overrides?: CallOverrides): Promise<boolean>;

  isSwapEnabled(overrides?: CallOverrides): Promise<boolean>;

  lastFundingTimes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  liquidatePosition(
    _account: string,
    _collateralToken: string,
    _indexToken: string,
    _isLong: boolean,
    _feeReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidationFeeUsd(overrides?: CallOverrides): Promise<BigNumber>;

  marginFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  maxDebtBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

  maxLeverage(overrides?: CallOverrides): Promise<BigNumber>;

  maxUsdgBatchSize(overrides?: CallOverrides): Promise<BigNumber>;

  maxUsdgBuffer(overrides?: CallOverrides): Promise<BigNumber>;

  minProfitBasisPoints(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolAmounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  positions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      size: BigNumber;
      collateral: BigNumber;
      averagePrice: BigNumber;
      entryFundingRate: BigNumber;
      reserveAmount: BigNumber;
      realisedPnl: BigNumber;
    }
  >;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  redemptionBasisPoints(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeRouter(
    _router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reservedAmounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  router(overrides?: CallOverrides): Promise<string>;

  sellUSDG(
    _token: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFees(
    _swapFeeBasisPoints: BigNumberish,
    _stableSwapFeeBasisPoints: BigNumberish,
    _marginFeeBasisPoints: BigNumberish,
    _liquidationFeeUsd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundingRate(
    _fundingInterval: BigNumberish,
    _fundingRateFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsMintingEnabled(
    _isMintingEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsSwapEnabled(
    _isSwapEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxDebtBasisPoints(
    _maxDebtBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxGasPrice(
    _maxGasPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxLeverage(
    _maxLeverage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxUsdg(
    _maxUsdgBatchSize: BigNumberish,
    _maxUsdgBuffer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceFeed(
    _priceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenConfig(
    _token: string,
    _tokenDecimals: BigNumberish,
    _redemptionBps: BigNumberish,
    _minProfitBps: BigNumberish,
    _isStable: boolean,
    _isShortable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shortableTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  stableSwapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  stableTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  swap(
    _tokenIn: string,
    _tokenOut: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  tokenBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  tokenDecimals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  tokenToUsdMax(
    _token: string,
    _tokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenToUsdMin(
    _token: string,
    _tokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateCumulativeFundingRate(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdToToken(
    _token: string,
    _usdAmount: BigNumberish,
    _price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  usdToTokenMax(
    _token: string,
    _usdAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  usdToTokenMin(
    _token: string,
    _usdAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  usdg(overrides?: CallOverrides): Promise<string>;

  usdgAmounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  validateLiquidation(
    _account: string,
    _collateralToken: string,
    _indexToken: string,
    _isLong: boolean,
    _raise: boolean,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  whitelistedTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  whitelistedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  withdrawFees(
    _token: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LIQUIDATION_FEE_USD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_FUNDING_RATE_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LEVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USDG_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    addRouter(_router: string, overrides?: CallOverrides): Promise<void>;

    adjustForDecimals(
      _amount: BigNumberish,
      _tokenDiv: string,
      _tokenMul: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvedRouters(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    availableReserve(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyUSDG(
      _token: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearTokenConfig(_token: string, overrides?: CallOverrides): Promise<void>;

    cumulativeFundingRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    directPoolDeposit(_token: string, overrides?: CallOverrides): Promise<void>;

    feeReserves(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fundingInterval(overrides?: CallOverrides): Promise<BigNumber>;

    fundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getDelta(
      _indexToken: string,
      _size: BigNumberish,
      _averagePrice: BigNumberish,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getFundingFee(
      _token: string,
      _size: BigNumberish,
      _entryFundingRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getMaxUsdgAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getMinPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNextAveragePrice(
      _indexToken: string,
      _size: BigNumberish,
      _averagePrice: BigNumberish,
      _isLong: boolean,
      _nextPrice: BigNumberish,
      _sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextFundingRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ]
    >;

    getPositionDelta(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getPositionFee(
      _sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionKey(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    getPositionLeverage(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionAmount(
      _token: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionBasisPoints(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionCollateral(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionCollateralUsd(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUtilisation(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    guaranteedUsd(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    includeAmmPrice(overrides?: CallOverrides): Promise<boolean>;

    increasePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _router: string,
      _usdg: string,
      _priceFeed: string,
      _maxUsdgBatchSize: BigNumberish,
      _maxUsdgBuffer: BigNumberish,
      _liquidationFeeUsd: BigNumberish,
      _fundingRateFactor: BigNumberish,
      _maxGasPrice: BigNumberish,
      _maxDebtBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isMintingEnabled(overrides?: CallOverrides): Promise<boolean>;

    isSwapEnabled(overrides?: CallOverrides): Promise<boolean>;

    lastFundingTimes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidatePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _feeReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationFeeUsd(overrides?: CallOverrides): Promise<BigNumber>;

    marginFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    maxDebtBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    maxLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    maxUsdgBatchSize(overrides?: CallOverrides): Promise<BigNumber>;

    maxUsdgBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    minProfitBasisPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolAmounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        size: BigNumber;
        collateral: BigNumber;
        averagePrice: BigNumber;
        entryFundingRate: BigNumber;
        reserveAmount: BigNumber;
        realisedPnl: BigNumber;
      }
    >;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    redemptionBasisPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeRouter(_router: string, overrides?: CallOverrides): Promise<void>;

    reservedAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<string>;

    sellUSDG(
      _token: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFees(
      _swapFeeBasisPoints: BigNumberish,
      _stableSwapFeeBasisPoints: BigNumberish,
      _marginFeeBasisPoints: BigNumberish,
      _liquidationFeeUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingRate(
      _fundingInterval: BigNumberish,
      _fundingRateFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    setIsMintingEnabled(
      _isMintingEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsSwapEnabled(
      _isSwapEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDebtBasisPoints(
      _maxDebtBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxGasPrice(
      _maxGasPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxLeverage(
      _maxLeverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxUsdg(
      _maxUsdgBatchSize: BigNumberish,
      _maxUsdgBuffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeed(_priceFeed: string, overrides?: CallOverrides): Promise<void>;

    setTokenConfig(
      _token: string,
      _tokenDecimals: BigNumberish,
      _redemptionBps: BigNumberish,
      _minProfitBps: BigNumberish,
      _isStable: boolean,
      _isShortable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    shortableTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    stableSwapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    stableTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    swap(
      _tokenIn: string,
      _tokenOut: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenDecimals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenToUsdMax(
      _token: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToUsdMin(
      _token: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateCumulativeFundingRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usdToToken(
      _token: string,
      _usdAmount: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usdToTokenMax(
      _token: string,
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usdToTokenMin(
      _token: string,
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usdg(overrides?: CallOverrides): Promise<string>;

    usdgAmounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    validateLiquidation(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    whitelistedTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawFees(
      _token: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    BuyUSDG(
      account?: null,
      token?: null,
      tokenAmount?: null,
      usdgAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        account: string;
        token: string;
        tokenAmount: BigNumber;
        usdgAmount: BigNumber;
      }
    >;

    ClosePosition(
      key?: null,
      size?: null,
      collateral?: null,
      averagePrice?: null,
      entryFundingRate?: null,
      reserveAmount?: null,
      realisedPnl?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        key: string;
        size: BigNumber;
        collateral: BigNumber;
        averagePrice: BigNumber;
        entryFundingRate: BigNumber;
        reserveAmount: BigNumber;
        realisedPnl: BigNumber;
      }
    >;

    CollectMarginFees(
      token?: null,
      feeUsd?: null,
      feeTokens?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token: string; feeUsd: BigNumber; feeTokens: BigNumber }
    >;

    CollectSwapFees(
      token?: null,
      feeAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; feeAmount: BigNumber }
    >;

    DecreaseGuaranteedUsd(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    DecreasePoolAmount(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    DecreasePosition(
      key?: null,
      account?: null,
      collateralToken?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      price?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ],
      {
        key: string;
        account: string;
        collateralToken: string;
        indexToken: string;
        collateralDelta: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        price: BigNumber;
      }
    >;

    DecreaseReservedAmount(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    DecreaseUsdgAmount(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    DirectPoolDeposit(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    IncreaseGuaranteedUsd(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    IncreasePoolAmount(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    IncreasePosition(
      key?: null,
      account?: null,
      collateralToken?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      price?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ],
      {
        key: string;
        account: string;
        collateralToken: string;
        indexToken: string;
        collateralDelta: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        price: BigNumber;
      }
    >;

    IncreaseReservedAmount(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    IncreaseUsdgAmount(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    LiquidatePosition(
      key?: null,
      account?: null,
      collateralToken?: null,
      indexToken?: null,
      isLong?: null,
      size?: null,
      collateral?: null,
      reserveAmount?: null,
      realisedPnl?: null,
      markPrice?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        key: string;
        account: string;
        collateralToken: string;
        indexToken: string;
        isLong: boolean;
        size: BigNumber;
        collateral: BigNumber;
        reserveAmount: BigNumber;
        realisedPnl: BigNumber;
        markPrice: BigNumber;
      }
    >;

    SellUSDG(
      account?: null,
      token?: null,
      usdgAmount?: null,
      tokenAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        account: string;
        token: string;
        usdgAmount: BigNumber;
        tokenAmount: BigNumber;
      }
    >;

    Swap(
      account?: null,
      tokenIn?: null,
      tokenOut?: null,
      amountIn?: null,
      amountOut?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        account: string;
        tokenIn: string;
        tokenOut: string;
        amountIn: BigNumber;
        amountOut: BigNumber;
      }
    >;

    UpdateFundingRate(
      token?: null,
      fundingRate?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; fundingRate: BigNumber }
    >;

    UpdatePnl(
      key?: null,
      hasProfit?: null,
      delta?: null
    ): TypedEventFilter<
      [string, boolean, BigNumber],
      { key: string; hasProfit: boolean; delta: BigNumber }
    >;

    UpdatePosition(
      key?: null,
      size?: null,
      collateral?: null,
      averagePrice?: null,
      entryFundingRate?: null,
      reserveAmount?: null,
      realisedPnl?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        key: string;
        size: BigNumber;
        collateral: BigNumber;
        averagePrice: BigNumber;
        entryFundingRate: BigNumber;
        reserveAmount: BigNumber;
        realisedPnl: BigNumber;
      }
    >;
  };

  estimateGas: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LIQUIDATION_FEE_USD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_FUNDING_RATE_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LEVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USDG_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    addRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adjustForDecimals(
      _amount: BigNumberish,
      _tokenDiv: string,
      _tokenMul: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvedRouters(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    availableReserve(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyUSDG(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clearTokenConfig(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cumulativeFundingRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    directPoolDeposit(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeReserves(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fundingInterval(overrides?: CallOverrides): Promise<BigNumber>;

    fundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getDelta(
      _indexToken: string,
      _size: BigNumberish,
      _averagePrice: BigNumberish,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingFee(
      _token: string,
      _size: BigNumberish,
      _entryFundingRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getMaxUsdgAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getMinPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNextAveragePrice(
      _indexToken: string,
      _size: BigNumberish,
      _averagePrice: BigNumberish,
      _isLong: boolean,
      _nextPrice: BigNumberish,
      _sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextFundingRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionDelta(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionFee(
      _sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionKey(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionLeverage(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionAmount(
      _token: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionBasisPoints(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionCollateral(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionCollateralUsd(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUtilisation(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    guaranteedUsd(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    includeAmmPrice(overrides?: CallOverrides): Promise<BigNumber>;

    increasePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _router: string,
      _usdg: string,
      _priceFeed: string,
      _maxUsdgBatchSize: BigNumberish,
      _maxUsdgBuffer: BigNumberish,
      _liquidationFeeUsd: BigNumberish,
      _fundingRateFactor: BigNumberish,
      _maxGasPrice: BigNumberish,
      _maxDebtBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isMintingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    isSwapEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    lastFundingTimes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidatePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidationFeeUsd(overrides?: CallOverrides): Promise<BigNumber>;

    marginFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    maxDebtBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    maxLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    maxUsdgBatchSize(overrides?: CallOverrides): Promise<BigNumber>;

    maxUsdgBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    minProfitBasisPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolAmounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    positions(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    redemptionBasisPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reservedAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    sellUSDG(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFees(
      _swapFeeBasisPoints: BigNumberish,
      _stableSwapFeeBasisPoints: BigNumberish,
      _marginFeeBasisPoints: BigNumberish,
      _liquidationFeeUsd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundingRate(
      _fundingInterval: BigNumberish,
      _fundingRateFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsMintingEnabled(
      _isMintingEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsSwapEnabled(
      _isSwapEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxDebtBasisPoints(
      _maxDebtBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxGasPrice(
      _maxGasPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxLeverage(
      _maxLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxUsdg(
      _maxUsdgBatchSize: BigNumberish,
      _maxUsdgBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceFeed(
      _priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenConfig(
      _token: string,
      _tokenDecimals: BigNumberish,
      _redemptionBps: BigNumberish,
      _minProfitBps: BigNumberish,
      _isStable: boolean,
      _isShortable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shortableTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableSwapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    stableTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      _tokenIn: string,
      _tokenOut: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenDecimals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenToUsdMax(
      _token: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToUsdMin(
      _token: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateCumulativeFundingRate(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdToToken(
      _token: string,
      _usdAmount: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usdToTokenMax(
      _token: string,
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usdToTokenMin(
      _token: string,
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usdg(overrides?: CallOverrides): Promise<BigNumber>;

    usdgAmounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    validateLiquidation(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFees(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS_DIVISOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FUNDING_RATE_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_FEE_BASIS_POINTS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_FUNDING_RATE_FACTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_LIQUIDATION_FEE_USD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_FUNDING_RATE_INTERVAL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_LEVERAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDG_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adjustForDecimals(
      _amount: BigNumberish,
      _tokenDiv: string,
      _tokenMul: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedRouters(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    availableReserve(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyUSDG(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clearTokenConfig(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cumulativeFundingRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreasePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    directPoolDeposit(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeReserves(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingRateFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDelta(
      _indexToken: string,
      _size: BigNumberish,
      _averagePrice: BigNumberish,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundingFee(
      _token: string,
      _size: BigNumberish,
      _entryFundingRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxUsdgAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextAveragePrice(
      _indexToken: string,
      _size: BigNumberish,
      _averagePrice: BigNumberish,
      _isLong: boolean,
      _nextPrice: BigNumberish,
      _sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextFundingRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionDelta(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionFee(
      _sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionKey(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionLeverage(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedemptionAmount(
      _token: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedemptionBasisPoints(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedemptionCollateral(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedemptionCollateralUsd(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUtilisation(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guaranteedUsd(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    includeAmmPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increasePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _router: string,
      _usdg: string,
      _priceFeed: string,
      _maxUsdgBatchSize: BigNumberish,
      _maxUsdgBuffer: BigNumberish,
      _liquidationFeeUsd: BigNumberish,
      _fundingRateFactor: BigNumberish,
      _maxGasPrice: BigNumberish,
      _maxDebtBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMintingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSwapEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastFundingTimes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidatePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidationFeeUsd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marginFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDebtBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLeverage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxUsdgBatchSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxUsdgBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minProfitBasisPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redemptionBasisPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reservedAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellUSDG(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFees(
      _swapFeeBasisPoints: BigNumberish,
      _stableSwapFeeBasisPoints: BigNumberish,
      _marginFeeBasisPoints: BigNumberish,
      _liquidationFeeUsd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundingRate(
      _fundingInterval: BigNumberish,
      _fundingRateFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsMintingEnabled(
      _isMintingEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsSwapEnabled(
      _isSwapEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDebtBasisPoints(
      _maxDebtBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxGasPrice(
      _maxGasPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxLeverage(
      _maxLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxUsdg(
      _maxUsdgBatchSize: BigNumberish,
      _maxUsdgBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      _priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenConfig(
      _token: string,
      _tokenDecimals: BigNumberish,
      _redemptionBps: BigNumberish,
      _minProfitBps: BigNumberish,
      _isStable: boolean,
      _isShortable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shortableTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableSwapFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      _tokenIn: string,
      _tokenOut: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenDecimals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToUsdMax(
      _token: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToUsdMin(
      _token: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateCumulativeFundingRate(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdToToken(
      _token: string,
      _usdAmount: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usdToTokenMax(
      _token: string,
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usdToTokenMin(
      _token: string,
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usdg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdgAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateLiquidation(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedTokenCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
